<launch>
<!-- these are the arguments you can pass this launch file, for example paused:=true -->
 <arg name="paused" default="true"/>
 <arg name="use_sim_time" default="true"/>
 <arg name="gui" default="true"/>
 <arg name="headless" default="false"/>
 <arg name="debug" default="false"/>
 <arg name="model" default="$(find human_description)/urdf/human_gazebo.xacro"/>

<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
<!--elevator_world  empty_world  mud_world  range_world  rubble_world  shapes_world  willowgarage_world-->
<include file="$(find gazebo_ros)/launch/empty_world.launch">
<!--  <arg name="world_name" value="$(find human_description)/urdf/room/simple_room.world"/>-->
  <arg name="world_name" value="$(find human_description)/urdf/room/detailed_room.world"/>
  <arg name="debug" value="$(arg debug)" />
  <arg name="gui" value="$(arg gui)" />
  <arg name="paused" value="$(arg paused)"/>
  <arg name="use_sim_time" value="$(arg use_sim_time)"/>
  <arg name="headless" value="$(arg headless)"/>

</include>

<!--<node name="rviz" pkg="rviz" type="rviz" />-->

<!--for running the navigation uncomment these lines-->
<!--<include file="$(find human_amcl)/launch/human_amcl.launch">
</include>
<include file="$(find human_movebase)/launch/move_base_launcher.launch">
</include>-->

<!--for generating a new map uncomment this line and make sure walk node contains a proper path to record all of the map-->
<!--<include file="$(find human_mapping)/launch/gmapping.launch"/>-->

<!--this node is for the walking of robot-->
<node name="walk_engine" pkg="walk"  type="walk_engine" />

<!--for using the moveit uncomment this line-->
<include file="$(find human_moveit)/launch/execution_planning.launch"/>


<!--<node name="tf_broadcaster" pkg="robot_setup_tf" type="tf_broadcaster" />-->


<param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)" />
<!-- push robot_description to factory and spawn robot in gazebo -->
<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
      args="-z 0 -unpause -urdf -model robot -param robot_description" respawn="false" output="screen" />

 <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
       respawn="false" output="screen">
 <!--  <param name="publish_frequency" type="double" value="30.0" />-->
        <remap from="/joint_states" to="/human_model/joint_states" />
 </node>

<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="use_qui" value="true"/>
</node>




<node name="state_publisher" pkg="human_description" type="state_publisher" />


<rosparam file="$(find human_description)/config/robotjoints.yaml" command="load"/>

<!-- load the controllers -->
<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
      output="screen" ns="/human_model" args="joint_state_controller
                                        base_link_to_human_head_position_controller
                                        right_thigh_to_base_linkYaw_position_controller
                                        right_thigh_to_base_linkRoll_position_controller
                                        right_thigh_to_base_link_position_controller
                                        left_thigh_to_base_linkYaw_position_controller
                                        left_thigh_to_base_linkRoll_position_controller
                                        left_thigh_to_base_link_position_controller
                                        right_leg_to_right_thigh_position_controller
                                        left_leg_to_left_thigh_position_controller
                                        right_leg_to_right_ankle_position_controller
                                        left_leg_to_left_ankle_position_controller
                                        right_foot_to_right_ankle_position_controller
                                        left_foot_to_left_ankle_position_controller
                                        hokuyo_joint_position_controller
                                        camera_joint_position_controller
                                        left_arm
                                        right_arm"/>






</launch>

